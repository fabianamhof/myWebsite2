---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="description" content="A small portfolio of Fabian Amhof." />
		<meta name="google-site-verification" content="3W0__axnFud2iDNNt0_sL2qTJfYYjpLLTozcz1P9BaE" />
	</head>
	<body class="bg-backgroundColor text-textColor relative w-full">
		<canvas data-canvas class="h-full bg-transparent absolute"></canvas>
		<slot />
	</body>
</html>
<script>
const canvas = document.querySelector('[data-canvas]') as HTMLCanvasElement;
canvas.width = document.body.clientWidth;
canvas.height = document.body.clientHeight;

const NUM_PAGES = 4;
let pageHeight = canvas.height / NUM_PAGES;
let pageWidth = canvas.width;

const canvasCtx = canvas.getContext("2d")!;
canvasCtx.translate(0, canvas.height);
canvasCtx.scale(1, -1);


type Cloud = Parameters<CanvasRenderingContext2D["arc"]>[];
const clouds: Cloud[] = []
for(let i = 0; i < 100; i++) {
	clouds.push(getRandomCloud(i * 400 * (Math.random() * 0.2 + 0.8) + 300 , canvas.height - canvas.height * 0.3 * (Math.random() * 0.8 + 0.2)));
}

function draw() {
	canvas.width = document.body.clientWidth;
	canvas.height = document.body.clientHeight;

	canvasCtx.translate(0, canvas.height);
    canvasCtx.scale(1, -1);

	pageHeight = canvas.height / NUM_PAGES;
	pageWidth = canvas.width;

	canvasCtx.clearRect(0, 0, canvas.width, canvas.height);

	drawMountains(canvasCtx);
	drawClouds(canvasCtx);
}
draw();
setInterval(() => {
	draw();
}, 20)


function getRandomCloud(x: number, y: number, scale: number = Math.random() * 1 + 2): Cloud {
	const cloud: Cloud = [
		[x, y, 20 * scale, 0, Math.PI * 2],
		[x + (Math.random() * 10 + 10) * scale, y - (Math.random() * 10 + 5) * scale, 20 * scale, 0, Math.PI * 2],
		[x + (Math.random() * 10 + 20) * scale, y + (Math.random() * 10 + 5) * scale, 20 * scale, 0, Math.PI * 2],
		[x + (Math.random() * 10 + 5) * scale, y + (Math.random() * 10 + 15) * scale, 20 * scale, 0, Math.PI * 2],
		[x + (Math.random() * 10 + 15) * scale, y + (Math.random() * 10 + 10) * scale, 20 * scale, 0, Math.PI * 2],
	]

	return cloud;
}

function drawClouds(ctx: CanvasRenderingContext2D){
	for(const cloud of clouds) {
		moveCloud(cloud, 1);
		if(cloud[0][0] - pageWidth < canvas.width) {
			drawCloud(ctx, cloud);
		}
	}
}

function drawCloud(ctx: CanvasRenderingContext2D, cloud: Cloud, color: string = "white") {
	ctx.beginPath();
	for(const circle of cloud) {
		ctx.arc(...circle);
	}
	ctx.fillStyle = color
	ctx.shadowColor = "white";
	ctx.fill();
}

function moveCloud(cloud: Cloud, amount: number) {
	for (const circle of cloud) {
		circle[0] -= amount;
	}
}

function drawMountains(ctx: CanvasRenderingContext2D){
	var html = document.documentElement, 
    body = document.body,
    st = 'scrollTop' as const,
    sh = 'scrollHeight' as const;
	
	const currentPosition = (html[st]||body[st]) / ((html[sh]||body[sh]) - html.clientHeight);

	const mountainBottom = pageHeight * 2;
	
	const mountain1Height = pageHeight * 1.3 + (currentPosition * pageHeight);
	const mountain1Position = 0 - (currentPosition * pageWidth / 2);
	drawMountain(ctx, mountain1Position, mountainBottom, pageWidth / 2, mountain1Height, `rgb(${getComputedStyle(document.documentElement).getPropertyValue("--accentColor")})`);
	
	const mountain2Height = pageHeight * 1.3 + (currentPosition * pageHeight * 1.5);
	const mountain2Position = pageWidth / 2 + (currentPosition * pageWidth / 2);
	drawMountain(ctx, mountain2Position, mountainBottom, pageWidth / 2, mountain2Height, ctx.fillStyle = `rgb(${getComputedStyle(document.documentElement).getPropertyValue("--highlightColor")})`);
	
	const foreGroundMountainHeight = pageHeight * 1.5  + (currentPosition * pageHeight * 2);
	const foreGroundMountainWidth = pageWidth * 0.5 + pageWidth * 0.5 * Math.min(currentPosition, 1);
	const foreGroundMountainPositon = pageWidth * 0.25 - pageWidth * 0.25 * Math.min(currentPosition, 1);
	drawMountain(ctx, foreGroundMountainPositon, mountainBottom, foreGroundMountainWidth, foreGroundMountainHeight, ctx.fillStyle = `rgb(${getComputedStyle(document.documentElement).getPropertyValue("--primaryColor")})`);
}

function drawMountain(ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, color: string) {
	ctx.beginPath();
	ctx.moveTo(x, y);
	ctx.lineTo(x + width / 2, y + height);
	ctx.lineTo(x + width, y);
	ctx.rect(x, 0, width, y);

	ctx.shadowBlur = 10;
	ctx.shadowOffsetX = 0;
 	ctx.shadowOffsetY = 10;
	ctx.shadowColor = "gray";
	ctx.strokeStyle = color
	ctx.fillStyle = color;
	ctx.fill();
	ctx.stroke();
}
</script>
<style is:global>
:root {
	--backgroundColor: 250 250 255;
	--primaryColor: 105 153 93;
	--textColor: 38 61 66;
	--highlightColor: 146 55 77;
	--accentColor: 231 111 81;
}

html {
	font-family:  monospace, system-ui, sans-serif;
	scroll-behavior: smooth;
}

body {
	margin: 0;
}
</style>
